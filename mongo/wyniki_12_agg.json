MongoDB shell version v3.6.4
connecting to: mongodb://127.0.0.1:27017/nbd
MongoDB server version: 3.6.4
{
	"_batch" : [
		{
			"_id" : "SSP",
			"avgBalance" : 4695.17
		},
		{
			"_id" : "JOD",
			"avgBalance" : 4895.271627906976
		},
		{
			"_id" : "ARS",
			"avgBalance" : 4975.249333333333
		},
		{
			"_id" : "MRO",
			"avgBalance" : 5558.915
		},
		{
			"_id" : "LAK",
			"avgBalance" : 5394.065625
		},
		{
			"_id" : "KRW",
			"avgBalance" : 4926.102954545455
		},
		{
			"_id" : "MYR",
			"avgBalance" : 4974.131716417911
		},
		{
			"_id" : "RUB",
			"avgBalance" : 4998.520263620387
		},
		{
			"_id" : "MNT",
			"avgBalance" : 5079.186349206349
		},
		{
			"_id" : "HNL",
			"avgBalance" : 5047.501481481481
		},
		{
			"_id" : "BIF",
			"avgBalance" : 5086.925555555556
		},
		{
			"_id" : "CDF",
			"avgBalance" : 4947.149166666666
		},
		{
			"_id" : "PHP",
			"avgBalance" : 4999.044996960486
		},
		{
			"_id" : "MAD",
			"avgBalance" : 5009.177549019608
		},
		{
			"_id" : "AUD",
			"avgBalance" : 4853.3405999999995
		},
		{
			"_id" : "YER",
			"avgBalance" : 5031.529137931035
		},
		{
			"_id" : "BWP",
			"avgBalance" : 4741.033548387097
		},
		{
			"_id" : "LKR",
			"avgBalance" : 4893.725869565217
		},
		{
			"_id" : "CNY",
			"avgBalance" : 5007.394973525653
		},
		{
			"_id" : "TJS",
			"avgBalance" : 4794.622972972973
		},
		{
			"_id" : "RON",
			"avgBalance" : 5778.8
		},
		{
			"_id" : "NGN",
			"avgBalance" : 4875.084182509505
		},
		{
			"_id" : "MOP",
			"avgBalance" : 5337.77
		},
		{
			"_id" : "PLN",
			"avgBalance" : 103717.41200394867
		},
		{
			"_id" : "ETB",
			"avgBalance" : 5088.42679245283
		},
		{
			"_id" : "PEN",
			"avgBalance" : 4930.016778242678
		},
		{
			"_id" : "BRL",
			"avgBalance" : 4947.001763668431
		},
		{
			"_id" : "THB",
			"avgBalance" : 4950.759809976247
		},
		{
			"_id" : "SGD",
			"avgBalance" : 4273.493333333333
		},
		{
			"_id" : "SEK",
			"avgBalance" : 5042.47756462585
		},
		{
			"_id" : "XCD",
			"avgBalance" : 5424.193870967742
		},
		{
			"_id" : "MUR",
			"avgBalance" : 4922.445405405406
		},
		{
			"_id" : "GMD",
			"avgBalance" : 4645.997058823529
		},
		{
			"_id" : "UGX",
			"avgBalance" : 5076.518382352941
		},
		{
			"_id" : "EUR",
			"avgBalance" : 5022.583242105263
		},
		{
			"_id" : "IDR",
			"avgBalance" : 4999.937935339309
		},
		{
			"_id" : "VND",
			"avgBalance" : 5020.284568345324
		},
		{
			"_id" : "HTG",
			"avgBalance" : 4908.9120454545455
		},
		{
			"_id" : "PKR",
			"avgBalance" : 4983.844565217391
		},
		{
			"_id" : "KES",
			"avgBalance" : 4996.261296296296
		},
		{
			"_id" : "ALL",
			"avgBalance" : 5130.69188976378
		},
		{
			"_id" : "UAH",
			"avgBalance" : 5031.808674698796
		},
		{
			"_id" : "ZAR",
			"avgBalance" : 4907.703473684211
		},
		{
			"_id" : "MXN",
			"avgBalance" : 4944.642460063898
		},
		{
			"_id" : "JPY",
			"avgBalance" : 4951.771839080459
		},
		{
			"_id" : "PYG",
			"avgBalance" : 5026.587368421052
		},
		{
			"_id" : "DZD",
			"avgBalance" : 6083.1
		},
		{
			"_id" : "NOK",
			"avgBalance" : 5033.864966887417
		},
		{
			"_id" : "CAD",
			"avgBalance" : 4970.381863979849
		},
		{
			"_id" : "BHD",
			"avgBalance" : 4539.692
		},
		{
			"_id" : "XOF",
			"avgBalance" : 4968.317074468085
		},
		{
			"_id" : "USD",
			"avgBalance" : 4965.687496962333
		},
		{
			"_id" : "VUV",
			"avgBalance" : 4637.786
		},
		{
			"_id" : "SLL",
			"avgBalance" : 4842.704166666666
		},
		{
			"_id" : "GHS",
			"avgBalance" : 5197.440625
		},
		{
			"_id" : "EGP",
			"avgBalance" : 4984.30320754717
		},
		{
			"_id" : "XPF",
			"avgBalance" : 5112.538846153847
		},
		{
			"_id" : "HRK",
			"avgBalance" : 4889.386524822695
		},
		{
			"_id" : "GTQ",
			"avgBalance" : 5116.250869565217
		},
		{
			"_id" : "PAB",
			"avgBalance" : 5121.740985915493
		},
		{
			"_id" : "PGK",
			"avgBalance" : 4726.559230769231
		},
		{
			"_id" : "TRY",
			"avgBalance" : 4603.6325
		},
		{
			"_id" : "BOB",
			"avgBalance" : 4680.609818181818
		},
		{
			"_id" : "IQD",
			"avgBalance" : 5076.721818181818
		},
		{
			"_id" : "AED",
			"avgBalance" : 5297.3330000000005
		},
		{
			"_id" : "KHR",
			"avgBalance" : 5022.379
		},
		{
			"_id" : "GBP",
			"avgBalance" : 5073.184583333333
		},
		{
			"_id" : "UYU",
			"avgBalance" : 5043.394347826087
		},
		{
			"_id" : "RWF",
			"avgBalance" : 5412.495
		},
		{
			"_id" : "ZMW",
			"avgBalance" : 5191.63
		},
		{
			"_id" : "NZD",
			"avgBalance" : 5288.2428125
		},
		{
			"_id" : "TND",
			"avgBalance" : 5089.9359375
		},
		{
			"_id" : "QAR",
			"avgBalance" : 4544.865
		},
		{
			"_id" : "KYD",
			"avgBalance" : 4202.415
		},
		{
			"_id" : "FJD",
			"avgBalance" : 4660.715
		},
		{
			"_id" : "INR",
			"avgBalance" : 4834.588000000001
		},
		{
			"_id" : "AOA",
			"avgBalance" : 4827.342857142858
		},
		{
			"_id" : "ZWL",
			"avgBalance" : 4930.305517241379
		},
		{
			"_id" : "MVR",
			"avgBalance" : 4581.264285714286
		},
		{
			"_id" : "BZD",
			"avgBalance" : 4859.338000000001
		},
		{
			"_id" : "BTN",
			"avgBalance" : 5387.297142857143
		},
		{
			"_id" : "LSL",
			"avgBalance" : 4378.178333333333
		},
		{
			"_id" : "KWD",
			"avgBalance" : 4853.298235294118
		},
		{
			"_id" : "CHF",
			"avgBalance" : 5187.649523809524
		},
		{
			"_id" : "SBD",
			"avgBalance" : 4991.5
		},
		{
			"_id" : "SCR",
			"avgBalance" : 4932.526666666667
		},
		{
			"_id" : "HKD",
			"avgBalance" : 5755.755
		},
		{
			"_id" : "BBD",
			"avgBalance" : 5344.1
		},
		{
			"_id" : "FKP",
			"avgBalance" : 5118.97
		},
		{
			"_id" : "GNF",
			"avgBalance" : 4881.498666666666
		},
		{
			"_id" : "TWD",
			"avgBalance" : 5379.142857142857
		},
		{
			"_id" : "AWG",
			"avgBalance" : 3641.365
		},
		{
			"_id" : "LBP",
			"avgBalance" : 4814.006666666666
		},
		{
			"_id" : "BSD",
			"avgBalance" : 5032.853636363637
		},
		{
			"_id" : "STD",
			"avgBalance" : 4854.36
		},
		{
			"_id" : "GYD",
			"avgBalance" : 4351.166666666667
		},
		{
			"_id" : "DJF",
			"avgBalance" : 4911.423333333333
		},
		{
			"_id" : "SRD",
			"avgBalance" : 4921.6925
		},
		{
			"_id" : "ERN",
			"avgBalance" : 5399.6175
		},
		{
			"_id" : "BND",
			"avgBalance" : 3891.33
		},
		{
			"_id" : "BMD",
			"avgBalance" : 5189
		}
	],
	"_useReadCommands" : true,
	"_cursorid" : NumberLong("6349056839707074869"),
	"_batchSize" : undefined,
	"_maxAwaitTimeMS" : undefined,
	"_ns" : "nbd.people",
	"_db" : nbd,
	"_collName" : "people",
	"_cursorHandle" : {
		
	},
	"isClosed" : function () {
    if (this._useReadCommands) {
        return bsonWoCompare({_: this._cursorid}, {_: NumberLong(0)}) === 0;
    }
    return this._cursor.isClosed();
},
	"isExhausted" : function () {
    return this.isClosed() && this.objsLeftInBatch() === 0;
},
	"close" : function () {
    if (!this._useReadCommands) {
        this._cursor.close();
    } else if (bsonWoCompare({_: this._cursorid}, {_: NumberLong(0)}) !== 0) {
        var killCursorCmd = {
            killCursors: this._collName,
            cursors: [this._cursorid],
        };
        var cmdRes = this._db.runCommand(killCursorCmd);
        if (cmdRes.ok != 1) {
            throw _getErrorWithCode(cmdRes, "killCursors command failed: " + tojson(cmdRes));
        }

        this._cursorHandle.zeroCursorId();
        this._cursorid = NumberLong(0);
    }
},
	"_runGetMoreCommand" : function () {
    // Construct the getMore command.
    var getMoreCmd = {getMore: this._cursorid, collection: this._collName};

    if (this._batchSize) {
        getMoreCmd["batchSize"] = this._batchSize;
    }

    // maxAwaitTimeMS is only supported when using read commands.
    if (this._maxAwaitTimeMS) {
        getMoreCmd.maxTimeMS = this._maxAwaitTimeMS;
    }

    // Deliver the getMore command, and check for errors in the response.
    var cmdRes = this._db.runCommand(getMoreCmd);
    if (cmdRes.ok != 1) {
        throw _getErrorWithCode(cmdRes, "getMore command failed: " + tojson(cmdRes));
    }

    if (this._ns !== cmdRes.cursor.ns) {
        throw Error("unexpected collection in getMore response: " + this._ns + " != " +
                    cmdRes.cursor.ns);
    }

    if (!cmdRes.cursor.id.compare(NumberLong("0"))) {
        this._cursorHandle.zeroCursorId();
        this._cursorid = NumberLong("0");
    } else if (this._cursorid.compare(cmdRes.cursor.id)) {
        throw Error("unexpected cursor id: " + this._cursorid.toString() + " != " +
                    cmdRes.cursor.id.toString());
    }

    // Successfully retrieved the next batch.
    this._batch = cmdRes.cursor.nextBatch.reverse();
},
	"_hasNextUsingCommands" : function () {
    assert(this._useReadCommands);

    if (!this._batch.length) {
        if (!this._cursorid.compare(NumberLong("0"))) {
            return false;
        }

        this._runGetMoreCommand();
    }

    return this._batch.length > 0;
},
	"hasNext" : function () {
    if (this._useReadCommands) {
        return this._hasNextUsingCommands();
    }

    return this._batch.length || this._cursor.hasNext();
},
	"next" : function () {
    if (this._batch.length) {
        // $err wouldn't be in _firstBatch since ok was true.
        return this._batch.pop();
    } else if (this._useReadCommands) {
        // Have to call hasNext() here, as this is where we may issue a getMore in order to retrieve
        // the next batch of results.
        if (!this.hasNext())
            throw Error("error hasNext: false");
        return this._batch.pop();
    } else {
        if (!this._cursor.hasNext())
            throw Error("error hasNext: false");

        var ret = this._cursor.next();
        if (ret.$err)
            throw _getErrorWithCode(ret, "error: " + tojson(ret));
        return ret;
    }
},
	"objsLeftInBatch" : function () {
    if (this._useReadCommands) {
        return this._batch.length;
    } else if (this._batch.length) {
        return this._batch.length;
    } else {
        return this._cursor.objsLeftInBatch();
    }
},
	"help" : function () {
    // This is the same as the "Cursor Methods" section of DBQuery.help().
    print("\nCursor methods");
    print("\t.toArray() - iterates through docs and returns an array of the results");
    print("\t.forEach( func )");
    print("\t.map( func )");
    print("\t.hasNext()");
    print("\t.next()");
    print(
        "\t.objsLeftInBatch() - returns count of docs left in current batch (when exhausted, a new getMore will be issued)");
    print("\t.itcount() - iterates through documents and counts them");
    print("\t.pretty() - pretty print each document, possibly over multiple lines");
    print("\t.close()");
},
	"toArray" : function () {
    if (this._arr)
        return this._arr;

    var a = [];
    while (this.hasNext())
        a.push(this.next());
    this._arr = a;
    return a;
},
	"forEach" : function (func) {
    while (this.hasNext())
        func(this.next());
},
	"map" : function (func) {
    var a = [];
    while (this.hasNext())
        a.push(func(this.next()));
    return a;
},
	"itcount" : function () {
    var num = 0;

    // Track how many bytes we've used this cursor to iterate iterated.  This function can be called
    // with some very large cursors.  SpiderMonkey appears happy to allow these objects to
    // accumulate, so regular gc() avoids an overly large memory footprint.
    //
    // TODO: migrate this function into c++
    var bytesSinceGC = 0;

    while (this.hasNext()) {
        num++;
        var nextDoc = this.next();
        bytesSinceGC += Object.bsonsize(nextDoc);

        // Garbage collect every 10 MB.
        if (bytesSinceGC > (10 * 1024 * 1024)) {
            bytesSinceGC = 0;
            gc();
        }
    }
    return num;
},
	"shellPrint" : function () {
    try {
        var start = new Date().getTime();
        var n = 0;
        while (this.hasNext() && n < DBQuery.shellBatchSize) {
            var s = this._prettyShell ? tojson(this.next()) : tojson(this.next(), "", true);
            print(s);
            n++;
        }
        if (typeof _verboseShell !== 'undefined' && _verboseShell) {
            var time = new Date().getTime() - start;
            print("Fetched " + n + " record(s) in " + time + "ms");
        }
        if (this.hasNext()) {
            print("Type \"it\" for more");
            ___it___ = this;
        } else {
            ___it___ = null;
        }
    } catch (e) {
        print(e);
    }

},
	"pretty" : function () {
    this._prettyShell = true;
    return this;
}
}
